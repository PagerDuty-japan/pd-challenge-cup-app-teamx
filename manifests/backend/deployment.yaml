apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: $(TEAM_NAME)
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
      - name: db-migration
        image: 205930621170.dkr.ecr.ap-northeast-1.amazonaws.com/challenge-cup-backend-teamx:latest
        command: ["npx", "prisma", "migrate", "deploy"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: NODE_ENV
          value: "production"
        - name: NEW_RELIC_APP_NAME_BACKEND
          value: "Challenge Cup Backend __TEAM__ Deployment"
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-backend-secrets
              key: license_key
        - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
          value: "true"
        - name: NEW_RELIC_LOG_LEVEL
          value: "info"
      containers:
      - name: backend
        image: 205930621170.dkr.ecr.ap-northeast-1.amazonaws.com/challenge-cup-backend-teamx:latest
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: PRISMA_LOG_QUERIES
          value: "true"
        - name: NODE_ENV
          value: "production"
        - name: NEW_RELIC_APP_NAME_BACKEND
          value: "Challenge Cup Backend"
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-backend-secrets
              key: license_key
        - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
          value: "true"
        - name: NEW_RELIC_LOG_LEVEL
          value: "info"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: $(TEAM_NAME)
  labels:
    app: backend
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: backend
  type: ClusterIP
